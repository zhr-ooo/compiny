{"remainingRequest":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js??ref--0-0!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_vue-loader@15.9.2@vue-loader\\lib\\index.js??vue-loader-options!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\src\\views\\system\\LogList.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\src\\views\\system\\LogList.vue","mtime":1588835585491},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_vue-loader@15.9.2@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { filterObj, formatDate } from '@/utils/util';\nimport { JeecgListMixin } from '@/mixins/JeecgListMixin';\nimport JEllipsis from '@/components/jeecg/JEllipsis';\nimport moment from 'moment';\nexport default {\n  name: \"LogList\",\n  mixins: [JeecgListMixin],\n  components: {\n    JEllipsis: JEllipsis\n  },\n  data: function data() {\n    return {\n      description: '日志管理页面',\n      // 查询条件\n      queryParam: {\n        createTimeRange: [],\n        logType: '0',\n        begin: '',\n        end: '',\n        operType: ''\n      },\n      param: {\n        createTimeRange: [],\n        logType: '0',\n        begin: '',\n        end: '',\n        operType: ''\n      },\n      tabKey: \"0\",\n      // 表头\n      columns: [{\n        title: '日志内容',\n        align: \"left\",\n        dataIndex: 'log_content',\n        scopedSlots: {\n          customRender: 'logContent'\n        },\n        sorter: true\n      }, {\n        title: '操作人ID',\n        dataIndex: 'userid',\n        align: \"center\",\n        sorter: true\n      }, {\n        title: '操作人名称',\n        dataIndex: 'username',\n        align: \"center\",\n        sorter: true\n      }, {\n        title: 'IP',\n        dataIndex: 'ip',\n        align: \"center\",\n        sorter: true\n      }, {\n        title: '耗时(毫秒)',\n        dataIndex: 'cost_time',\n        align: \"center\",\n        sorter: true\n      }, {\n        title: '操作时间',\n        dataIndex: 'create_time',\n        align: \"center\",\n        sorter: true,\n        customRender: function customRender(text) {\n          if (text) {\n            return formatDate(text, 'yyyy-MM-dd hh:mm:ss');\n          }\n        }\n      }, {\n        title: '操作用户',\n        dataIndex: 'create_by',\n        align: \"center\",\n        customRender: function customRender(text) {\n          if (text === 'vyunAPP') {\n            return 'app用户';\n          } else if (text === 'vyunJob') {\n            return '定时任务';\n          } else {\n            return '后台管理用户';\n          }\n        }\n      }],\n      operateColumn: [{\n        title: '访问URL',\n        dataIndex: 'request_url',\n        align: 'center',\n        scopedSlots: {\n          customRender: 'logContent'\n        }\n      }, {\n        title: '操作类型',\n        dataIndex: 'operate_type',\n        align: \"center\",\n        customRender: function customRender(text) {\n          if (text === 1) {\n            return '查询';\n          } else if (text === 2) {\n            return '添加';\n          } else if (text === 3) {\n            return '修改';\n          } else if (text === 4) {\n            return '删除';\n          } else if (text === 5) {\n            return '导入';\n          } else if (text === 6) {\n            return '导出';\n          } else {\n            return text;\n          }\n        }\n      }],\n      labelCol: {\n        xs: {\n          span: 1\n        },\n        sm: {\n          span: 2\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 10\n        },\n        sm: {\n          span: 16\n        }\n      },\n      url: {\n        list: \"/sys/log/list\"\n      }\n    };\n  },\n  created: function created() {\n    var nowTime = new Date().getTime();\n    var end = formatDate(nowTime, 'yyyy-MM-dd');\n    var begin = formatDate(nowTime - 24 * 60 * 60 * 1000, 'yyyy-MM-dd');\n    this.queryParam.createTimeRange = [moment(begin, 'YYYY-MM-DD'), moment(end, 'YYYY-MM-DD')];\n    this.queryParam.begin = begin;\n    this.queryParam.end = end;\n  },\n  methods: {\n    getQueryParams: function getQueryParams() {\n      console.log(this.queryParam.createTimeRange);\n      var param = Object.assign({}, this.queryParam, this.isorter);\n      param.field = this.getQueryField();\n      param.pageNo = this.ipagination.current;\n      param.pageSize = this.ipagination.pageSize;\n      delete param.createTimeRange; // 时间参数不传递后台\n\n      return filterObj(param);\n    },\n    // 重置\n    searchReset: function searchReset() {\n      var that = this;\n      var logType = that.queryParam.logType;\n      that.queryParam = that.param; //清空查询区域参数\n\n      that.queryParam.logType = logType;\n      that.queryParam.operType = '';\n      that.loadData(this.ipagination.current);\n    },\n    // 日志类型\n    callback: function callback(key) {\n      // 动态添加操作类型列\n      if (key === '1') {\n        this.tabKey = '1';\n        var cols = this.columns.concat(this.operateColumn);\n        this.columns = cols;\n      } else {\n        this.tabKey = key;\n        this.columns.splice(7, 2);\n      }\n\n      var that = this;\n      that.queryParam.logType = key;\n      that.loadData();\n    },\n    onDateChange: function onDateChange(value, dateString) {\n      console.log(dateString[0], dateString[1]);\n      this.queryParam.begin = dateString[0];\n      this.queryParam.end = dateString[1];\n    },\n    onDateOk: function onDateOk(value) {\n      console.log(value);\n    }\n  }\n};",null]}