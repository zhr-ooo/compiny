{"remainingRequest":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js??ref--0-0!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_vue-loader@15.9.2@vue-loader\\lib\\index.js??vue-loader-options!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeTable.vue","mtime":1588673568116},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_vue-loader@15.9.2@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JTreeTable',\n  props: {\n    rowKey: {\n      type: String,\n      default: 'id'\n    },\n    // 根据什么查询，如果传递 id 就根据 id 查询\n    queryKey: {\n      type: String,\n      default: 'parentId'\n    },\n    queryParams: {\n      type: Object,\n      default: function _default() {}\n    },\n    // 查询顶级时的值，如果顶级为0，则传0\n    topValue: {\n      type: String,\n      default: null\n    },\n    columns: {\n      type: Array,\n      required: true\n    },\n    url: {\n      type: String,\n      required: true\n    },\n    childrenUrl: {\n      type: String,\n      default: null\n    },\n    tableProps: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      dataSource: []\n    };\n  },\n  computed: {\n    getChildrenUrl: function getChildrenUrl() {\n      if (this.childrenUrl) {\n        return this.childrenUrl;\n      } else {\n        return this.url;\n      }\n    },\n    slots: function slots() {\n      var slots = [];\n\n      var _iterator = _createForOfIteratorHelper(this.columns),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var column = _step.value;\n\n          if (column.scopedSlots && column.scopedSlots.customRender) {\n            slots.push(column.scopedSlots.customRender);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return slots;\n    }\n  },\n  watch: {\n    queryParams: {\n      deep: true,\n      handler: function handler() {\n        this.loadData();\n      }\n    }\n  },\n  created: function created() {\n    this.loadData();\n  },\n  methods: {\n    /** 加载数据*/\n    loadData: function loadData() {\n      var _this = this;\n\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.topValue;\n      var first = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var url = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.url;\n      var params = Object.assign({}, this.queryParams || {});\n      params[this.queryKey] = id;\n      return getAction(url, params).then(function (res) {\n        var dataSource = res.result.map(function (item) {\n          // 判断是否标记了带有子级\n          if (item.hasChildren === true) {\n            // 定义默认展开时显示的loading子级，实际子级数据只在展开时加载\n            var loadChild = {\n              id: \"\".concat(item.id, \"_loadChild\"),\n              name: 'loading...',\n              isLoading: true\n            };\n            item.children = [loadChild];\n          }\n\n          return item;\n        });\n\n        if (first) {\n          _this.dataSource = dataSource;\n        }\n\n        return Promise.resolve(dataSource);\n      });\n    },\n\n    /** 点击展开图标时触发 */\n    handleExpand: function handleExpand(expanded, record) {\n      // 判断是否是展开状态\n      if (expanded) {\n        // 判断子级的首个项的标记是否是“正在加载中”，如果是就加载数据\n        if (record.children[0].isLoading === true) {\n          this.loadData(record.id, false, this.getChildrenUrl).then(function (dataSource) {\n            // 处理好的数据可直接赋值给children\n            if (dataSource.length === 0) {\n              record.children = null;\n            } else {\n              record.children = dataSource;\n            }\n          });\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["JTreeTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-table\n    :rowKey=\"rowKey\"\n    :columns=\"columns\"\n    :dataSource=\"dataSource\"\n    v-bind=\"tableProps\"\n    @expand=\"handleExpand\">\n\n    <template v-for=\"(slotItem) of slots\" :slot=\"slotItem\" slot-scope=\"text, record, index\">\n      <slot :name=\"slotItem\" v-bind=\"{text,record,index}\"></slot>\n    </template>\n\n  </a-table>\n</template>\n\n<script>\n  import { getAction } from '@/api/manage'\n\n  export default {\n    name: 'JTreeTable',\n    props: {\n      rowKey: {\n        type: String,\n        default: 'id'\n      },\n      // 根据什么查询，如果传递 id 就根据 id 查询\n      queryKey: {\n        type: String,\n        default: 'parentId'\n      },\n      queryParams: {\n        type: Object,\n        default: () => {\n        }\n      },\n      // 查询顶级时的值，如果顶级为0，则传0\n      topValue: {\n        type: String,\n        default: null\n      },\n      columns: {\n        type: Array,\n        required: true\n      },\n      url: {\n        type: String,\n        required: true\n      },\n      childrenUrl: {\n        type: String,\n        default: null\n      },\n      tableProps: {\n        type: Object,\n        default: () => {\n        }\n      }\n    },\n    data() {\n      return {\n        dataSource: []\n      }\n    },\n    computed: {\n      getChildrenUrl() {\n        if (this.childrenUrl) {\n          return this.childrenUrl\n        } else {\n          return this.url\n        }\n      },\n      slots() {\n        let slots = []\n        for (let column of this.columns) {\n          if (column.scopedSlots && column.scopedSlots.customRender) {\n            slots.push(column.scopedSlots.customRender)\n          }\n        }\n        return slots\n      }\n    },\n    watch: {\n      queryParams: {\n        deep: true,\n        handler() {\n          this.loadData()\n        }\n      }\n    },\n    created() {\n      this.loadData()\n    },\n    methods: {\n\n      /** 加载数据*/\n      loadData(id = this.topValue, first = true, url = this.url) {\n        let params = Object.assign({}, this.queryParams || {})\n        params[this.queryKey] = id\n        return getAction(url, params).then(res => {\n          let dataSource = res.result.map(item => {\n            // 判断是否标记了带有子级\n            if (item.hasChildren === true) {\n              // 定义默认展开时显示的loading子级，实际子级数据只在展开时加载\n              let loadChild = { id: `${item.id}_loadChild`, name: 'loading...', isLoading: true }\n              item.children = [loadChild]\n            }\n            return item\n          })\n          if (first) {\n            this.dataSource = dataSource\n          }\n          return Promise.resolve(dataSource)\n        })\n      },\n\n      /** 点击展开图标时触发 */\n      handleExpand(expanded, record) {\n        // 判断是否是展开状态\n        if (expanded) {\n          // 判断子级的首个项的标记是否是“正在加载中”，如果是就加载数据\n          if (record.children[0].isLoading === true) {\n            this.loadData(record.id, false, this.getChildrenUrl).then(dataSource => {\n              // 处理好的数据可直接赋值给children\n              if (dataSource.length === 0) {\n                record.children = null\n              } else {\n                record.children = dataSource\n              }\n            })\n          }\n        }\n      }\n\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/components/jeecg"}]}