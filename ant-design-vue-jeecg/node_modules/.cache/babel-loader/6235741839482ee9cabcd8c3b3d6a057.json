{"remainingRequest":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_eslint-loader@2.2.1@eslint-loader\\index.js??ref--13-0!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\src\\utils\\plugin.js","dependencies":[{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\src\\utils\\plugin.js","mtime":1588673568152},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_eslint-loader@2.2.1@eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport _typeof from \"E:/gitweb/vcloudsapce_web/ant-design-vue-jeecg/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport \"core-js/modules/es6.object.freeze\";\n\n/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.0.7 (2019-06-05)\n */\n(function () {\n  var image = function (domGlobals) {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var noop = function noop() {};\n\n    var constant = function constant(value) {\n      return function () {\n        return value;\n      };\n    };\n\n    var identity = function identity(x) {\n      return x;\n    };\n\n    var die = function die(msg) {\n      return function () {\n        throw new Error(msg);\n      };\n    };\n\n    var never = constant(false);\n    var always = constant(true);\n    var never$1 = never;\n    var always$1 = always;\n\n    var none = function none() {\n      return NONE;\n    };\n\n    var NONE = function () {\n      var eq = function eq(o) {\n        return o.isNone();\n      };\n\n      var call = function call(thunk) {\n        return thunk();\n      };\n\n      var id = function id(n) {\n        return n;\n      };\n\n      var noop = function noop() {};\n\n      var nul = function nul() {\n        return null;\n      };\n\n      var undef = function undef() {\n        return undefined;\n      };\n\n      var me = {\n        fold: function fold(n, s) {\n          return n();\n        },\n        is: never$1,\n        isSome: never$1,\n        isNone: always$1,\n        getOr: id,\n        getOrThunk: call,\n        getOrDie: function getOrDie(msg) {\n          throw new Error(msg || 'error: getOrDie called on none.');\n        },\n        getOrNull: nul,\n        getOrUndefined: undef,\n        or: id,\n        orThunk: call,\n        map: none,\n        ap: none,\n        each: noop,\n        bind: none,\n        flatten: none,\n        exists: never$1,\n        forall: always$1,\n        filter: none,\n        equals: eq,\n        equals_: eq,\n        toArray: function toArray() {\n          return [];\n        },\n        toString: constant('none()')\n      };\n      if (Object.freeze) Object.freeze(me);\n      return me;\n    }();\n\n    var some = function some(a) {\n      var constant_a = function constant_a() {\n        return a;\n      };\n\n      var self = function self() {\n        return me;\n      };\n\n      var map = function map(f) {\n        return some(f(a));\n      };\n\n      var bind = function bind(f) {\n        return f(a);\n      };\n\n      var me = {\n        fold: function fold(n, s) {\n          return s(a);\n        },\n        is: function is(v) {\n          return a === v;\n        },\n        isSome: always$1,\n        isNone: never$1,\n        getOr: constant_a,\n        getOrThunk: constant_a,\n        getOrDie: constant_a,\n        getOrNull: constant_a,\n        getOrUndefined: constant_a,\n        or: self,\n        orThunk: self,\n        map: map,\n        ap: function ap(optfab) {\n          return optfab.fold(none, function (fab) {\n            return some(fab(a));\n          });\n        },\n        each: function each(f) {\n          f(a);\n        },\n        bind: bind,\n        flatten: constant_a,\n        exists: bind,\n        forall: bind,\n        filter: function filter(f) {\n          return f(a) ? me : NONE;\n        },\n        equals: function equals(o) {\n          return o.is(a);\n        },\n        equals_: function equals_(o, elementEq) {\n          return o.fold(never$1, function (b) {\n            return elementEq(a, b);\n          });\n        },\n        toArray: function toArray() {\n          return [a];\n        },\n        toString: function toString() {\n          return 'some(' + a + ')';\n        }\n      };\n      return me;\n    };\n\n    var from = function from(value) {\n      return value === null || value === undefined ? NONE : some(value);\n    };\n\n    var Option = {\n      some: some,\n      none: none,\n      from: from\n    };\n\n    var typeOf = function typeOf(x) {\n      if (x === null) return 'null';\n\n      var t = _typeof(x);\n\n      if (t === 'object' && Array.prototype.isPrototypeOf(x)) return 'array';\n      if (t === 'object' && String.prototype.isPrototypeOf(x)) return 'string';\n      return t;\n    };\n\n    var isType = function isType(type) {\n      return function (value) {\n        return typeOf(value) === type;\n      };\n    };\n\n    var isString = isType('string');\n    var isObject = isType('object');\n    var isBoolean = isType('boolean');\n    var isFunction = isType('function');\n    var slice = Array.prototype.slice;\n\n    var each = function each(xs, f) {\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n        f(x, i, xs);\n      }\n    };\n\n    var find = function find(xs, pred) {\n      for (var i = 0, len = xs.length; i < len; i++) {\n        var x = xs[i];\n\n        if (pred(x, i, xs)) {\n          return Option.some(x);\n        }\n      }\n\n      return Option.none();\n    };\n\n    var push = Array.prototype.push;\n\n    var flatten = function flatten(xs) {\n      var r = [];\n\n      for (var i = 0, len = xs.length; i < len; ++i) {\n        if (!Array.prototype.isPrototypeOf(xs[i])) throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n        push.apply(r, xs[i]);\n      }\n\n      return r;\n    };\n\n    var head = function head(xs) {\n      return xs.length === 0 ? Option.none() : Option.some(xs[0]);\n    };\n\n    var from$1 = isFunction(Array.from) ? Array.from : function (x) {\n      return slice.call(x);\n    };\n\n    var _assign = function __assign() {\n      _assign = Object.assign || function __assign(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n\n          for (var p in s) {\n            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n          }\n        }\n\n        return t;\n      };\n\n      return _assign.apply(this, arguments);\n    };\n\n    var nu = function nu(baseFn) {\n      var data = Option.none();\n      var callbacks = [];\n\n      var map = function map(f) {\n        return nu(function (nCallback) {\n          get(function (data) {\n            nCallback(f(data));\n          });\n        });\n      };\n\n      var get = function get(nCallback) {\n        if (isReady()) call(nCallback);else callbacks.push(nCallback);\n      };\n\n      var set = function set(x) {\n        data = Option.some(x);\n        run(callbacks);\n        callbacks = [];\n      };\n\n      var isReady = function isReady() {\n        return data.isSome();\n      };\n\n      var run = function run(cbs) {\n        each(cbs, call);\n      };\n\n      var call = function call(cb) {\n        data.each(function (x) {\n          domGlobals.setTimeout(function () {\n            cb(x);\n          }, 0);\n        });\n      };\n\n      baseFn(set);\n      return {\n        get: get,\n        map: map,\n        isReady: isReady\n      };\n    };\n\n    var pure = function pure(a) {\n      return nu(function (callback) {\n        callback(a);\n      });\n    };\n\n    var LazyValue = {\n      nu: nu,\n      pure: pure\n    };\n\n    var bounce = function bounce(f) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var me = this;\n        domGlobals.setTimeout(function () {\n          f.apply(me, args);\n        }, 0);\n      };\n    };\n\n    var nu$1 = function nu$1(baseFn) {\n      var get = function get(callback) {\n        baseFn(bounce(callback));\n      };\n\n      var map = function map(fab) {\n        return nu$1(function (callback) {\n          get(function (a) {\n            var value = fab(a);\n            callback(value);\n          });\n        });\n      };\n\n      var bind = function bind(aFutureB) {\n        return nu$1(function (callback) {\n          get(function (a) {\n            aFutureB(a).get(callback);\n          });\n        });\n      };\n\n      var anonBind = function anonBind(futureB) {\n        return nu$1(function (callback) {\n          get(function (a) {\n            futureB.get(callback);\n          });\n        });\n      };\n\n      var toLazy = function toLazy() {\n        return LazyValue.nu(get);\n      };\n\n      var toCached = function toCached() {\n        var cache = null;\n        return nu$1(function (callback) {\n          if (cache === null) {\n            cache = toLazy();\n          }\n\n          cache.get(callback);\n        });\n      };\n\n      return {\n        map: map,\n        bind: bind,\n        anonBind: anonBind,\n        toLazy: toLazy,\n        toCached: toCached,\n        get: get\n      };\n    };\n\n    var pure$1 = function pure$1(a) {\n      return nu$1(function (callback) {\n        callback(a);\n      });\n    };\n\n    var Future = {\n      nu: nu$1,\n      pure: pure$1\n    };\n\n    var value = function value(o) {\n      var is = function is(v) {\n        return o === v;\n      };\n\n      var or = function or(opt) {\n        return value(o);\n      };\n\n      var orThunk = function orThunk(f) {\n        return value(o);\n      };\n\n      var map = function map(f) {\n        return value(f(o));\n      };\n\n      var mapError = function mapError(f) {\n        return value(o);\n      };\n\n      var each = function each(f) {\n        f(o);\n      };\n\n      var bind = function bind(f) {\n        return f(o);\n      };\n\n      var fold = function fold(_, onValue) {\n        return onValue(o);\n      };\n\n      var exists = function exists(f) {\n        return f(o);\n      };\n\n      var forall = function forall(f) {\n        return f(o);\n      };\n\n      var toOption = function toOption() {\n        return Option.some(o);\n      };\n\n      return {\n        is: is,\n        isValue: always,\n        isError: never,\n        getOr: constant(o),\n        getOrThunk: constant(o),\n        getOrDie: constant(o),\n        or: or,\n        orThunk: orThunk,\n        fold: fold,\n        map: map,\n        mapError: mapError,\n        each: each,\n        bind: bind,\n        exists: exists,\n        forall: forall,\n        toOption: toOption\n      };\n    };\n\n    var error = function error(message) {\n      var getOrThunk = function getOrThunk(f) {\n        return f();\n      };\n\n      var getOrDie = function getOrDie() {\n        return die(String(message))();\n      };\n\n      var or = function or(opt) {\n        return opt;\n      };\n\n      var orThunk = function orThunk(f) {\n        return f();\n      };\n\n      var map = function map(f) {\n        return error(message);\n      };\n\n      var mapError = function mapError(f) {\n        return error(f(message));\n      };\n\n      var bind = function bind(f) {\n        return error(message);\n      };\n\n      var fold = function fold(onError, _) {\n        return onError(message);\n      };\n\n      return {\n        is: never,\n        isValue: never,\n        isError: always,\n        getOr: identity,\n        getOrThunk: getOrThunk,\n        getOrDie: getOrDie,\n        or: or,\n        orThunk: orThunk,\n        fold: fold,\n        map: map,\n        mapError: mapError,\n        each: noop,\n        bind: bind,\n        exists: never,\n        forall: always,\n        toOption: Option.none\n      };\n    };\n\n    var fromOption = function fromOption(opt, err) {\n      return opt.fold(function () {\n        return error(err);\n      }, value);\n    };\n\n    var Result = {\n      value: value,\n      error: error,\n      fromOption: fromOption\n    };\n\n    var wrap = function wrap(delegate) {\n      var toCached = function toCached() {\n        return wrap(delegate.toCached());\n      };\n\n      var bindFuture = function bindFuture(f) {\n        return wrap(delegate.bind(function (resA) {\n          return resA.fold(function (err) {\n            return Future.pure(Result.error(err));\n          }, function (a) {\n            return f(a);\n          });\n        }));\n      };\n\n      var bindResult = function bindResult(f) {\n        return wrap(delegate.map(function (resA) {\n          return resA.bind(f);\n        }));\n      };\n\n      var mapResult = function mapResult(f) {\n        return wrap(delegate.map(function (resA) {\n          return resA.map(f);\n        }));\n      };\n\n      var mapError = function mapError(f) {\n        return wrap(delegate.map(function (resA) {\n          return resA.mapError(f);\n        }));\n      };\n\n      var foldResult = function foldResult(whenError, whenValue) {\n        return delegate.map(function (res) {\n          return res.fold(whenError, whenValue);\n        });\n      };\n\n      var withTimeout = function withTimeout(timeout, errorThunk) {\n        return wrap(Future.nu(function (callback) {\n          var timedOut = false;\n          var timer = domGlobals.setTimeout(function () {\n            timedOut = true;\n            callback(Result.error(errorThunk()));\n          }, timeout);\n          delegate.get(function (result) {\n            if (!timedOut) {\n              domGlobals.clearTimeout(timer);\n              callback(result);\n            }\n          });\n        }));\n      };\n\n      return _assign({}, delegate, {\n        toCached: toCached,\n        bindFuture: bindFuture,\n        bindResult: bindResult,\n        mapResult: mapResult,\n        mapError: mapError,\n        foldResult: foldResult,\n        withTimeout: withTimeout\n      });\n    };\n\n    var nu$2 = function nu$2(worker) {\n      return wrap(Future.nu(worker));\n    };\n\n    var value$1 = function value$1(value) {\n      return wrap(Future.pure(Result.value(value)));\n    };\n\n    var error$1 = function error$1(error) {\n      return wrap(Future.pure(Result.error(error)));\n    };\n\n    var fromResult = function fromResult(result) {\n      return wrap(Future.pure(result));\n    };\n\n    var fromFuture = function fromFuture(future) {\n      return wrap(future.map(Result.value));\n    };\n\n    var fromPromise = function fromPromise(promise) {\n      return nu$2(function (completer) {\n        promise.then(function (value) {\n          completer(Result.value(value));\n        }, function (error) {\n          completer(Result.error(error));\n        });\n      });\n    };\n\n    var FutureResult = {\n      nu: nu$2,\n      wrap: wrap,\n      pure: value$1,\n      value: value$1,\n      error: error$1,\n      fromResult: fromResult,\n      fromFuture: fromFuture,\n      fromPromise: fromPromise\n    };\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    var shallow = function shallow(old, nu) {\n      return nu;\n    };\n\n    var deep = function deep(old, nu) {\n      var bothObjects = isObject(old) && isObject(nu);\n      return bothObjects ? deepMerge(old, nu) : nu;\n    };\n\n    var baseMerge = function baseMerge(merger) {\n      return function () {\n        var objects = new Array(arguments.length);\n\n        for (var i = 0; i < objects.length; i++) {\n          objects[i] = arguments[i];\n        }\n\n        if (objects.length === 0) throw new Error('Can\\'t merge zero objects');\n        var ret = {};\n\n        for (var j = 0; j < objects.length; j++) {\n          var curObject = objects[j];\n\n          for (var key in curObject) {\n            if (hasOwnProperty.call(curObject, key)) {\n              ret[key] = merger(ret[key], curObject[key]);\n            }\n          }\n        }\n\n        return ret;\n      };\n    };\n\n    var deepMerge = baseMerge(deep);\n    var merge = baseMerge(shallow);\n    var Global = typeof domGlobals.window !== 'undefined' ? domGlobals.window : Function('return this;')();\n\n    var path = function path(parts, scope) {\n      var o = scope !== undefined && scope !== null ? scope : Global;\n\n      for (var i = 0; i < parts.length && o !== undefined && o !== null; ++i) {\n        o = o[parts[i]];\n      }\n\n      return o;\n    };\n\n    var resolve = function resolve(p, scope) {\n      var parts = p.split('.');\n      return path(parts, scope);\n    };\n\n    var unsafe = function unsafe(name, scope) {\n      return resolve(name, scope);\n    };\n\n    var getOrDie = function getOrDie(name, scope) {\n      var actual = unsafe(name, scope);\n      if (actual === undefined || actual === null) throw name + ' not available on this browser';\n      return actual;\n    };\n\n    var Global$1 = {\n      getOrDie: getOrDie\n    };\n\n    var url = function url() {\n      return Global$1.getOrDie('URL');\n    };\n\n    var createObjectURL = function createObjectURL(blob) {\n      return url().createObjectURL(blob);\n    };\n\n    var revokeObjectURL = function revokeObjectURL(u) {\n      url().revokeObjectURL(u);\n    };\n\n    var URL = {\n      createObjectURL: createObjectURL,\n      revokeObjectURL: revokeObjectURL\n    };\n\n    var makeItems = function makeItems(info) {\n      var imageUrl = {\n        name: 'src',\n        type: 'urlinput',\n        filetype: 'image',\n        label: 'Source'\n      };\n      var imageList = info.imageList.map(function (items) {\n        return {\n          name: 'images',\n          type: 'selectbox',\n          label: 'Image list',\n          items: items\n        };\n      });\n      var imageDescription = {\n        name: 'alt',\n        type: 'input',\n        label: 'Image description'\n      };\n      var imageTitle = {\n        name: 'title',\n        type: 'input',\n        label: 'Image title'\n      };\n      var imageDimensions = {\n        name: 'dimensions',\n        type: 'sizeinput'\n      };\n      var classList = info.classList.map(function (items) {\n        return {\n          name: 'classes',\n          type: 'selectbox',\n          label: 'Class',\n          items: items\n        };\n      });\n      var caption = {\n        type: 'label',\n        label: 'Caption',\n        items: [{\n          type: 'checkbox',\n          name: 'caption',\n          label: 'Show caption'\n        }]\n      };\n      return flatten([[imageUrl], imageList.toArray(), info.hasDescription ? [imageDescription] : [], info.hasImageTitle ? [imageTitle] : [], info.hasDimensions ? [imageDimensions] : [], [{\n        type: 'grid',\n        columns: 2,\n        items: flatten([classList.toArray(), info.hasImageCaption ? [caption] : []])\n      }]]);\n    };\n\n    var makeTab = function makeTab(info) {\n      return {\n        title: 'General',\n        name: 'general',\n        items: makeItems(info)\n      };\n    };\n\n    var MainTab = {\n      makeTab: makeTab,\n      makeItems: makeItems\n    };\n\n    function FileReader() {\n      var f = Global$1.getOrDie('FileReader');\n      return new f();\n    }\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Promise');\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.XHR');\n\n    var hasDimensions = function hasDimensions(editor) {\n      return editor.getParam('image_dimensions', true, 'boolean');\n    };\n\n    var hasAdvTab = function hasAdvTab(editor) {\n      return editor.getParam('image_advtab', false, 'boolean');\n    };\n\n    var hasUploadTab = function hasUploadTab(editor) {\n      return editor.getParam('image_uploadtab', true, 'boolean');\n    };\n\n    var getPrependUrl = function getPrependUrl(editor) {\n      return editor.getParam('image_prepend_url', '', 'string');\n    };\n\n    var getClassList = function getClassList(editor) {\n      return editor.getParam('image_class_list');\n    };\n\n    var hasDescription = function hasDescription(editor) {\n      return editor.getParam('image_description', true, 'boolean');\n    };\n\n    var hasImageTitle = function hasImageTitle(editor) {\n      return editor.getParam('image_title', false, 'boolean');\n    };\n\n    var hasImageCaption = function hasImageCaption(editor) {\n      return editor.getParam('image_caption', false, 'boolean');\n    };\n\n    var getImageList = function getImageList(editor) {\n      return editor.getParam('image_list', false);\n    };\n\n    var hasUploadUrl = function hasUploadUrl(editor) {\n      return !!getUploadUrl(editor);\n    };\n\n    var hasUploadHandler = function hasUploadHandler(editor) {\n      return !!getUploadHandler(editor);\n    };\n\n    var getUploadUrl = function getUploadUrl(editor) {\n      return editor.getParam('images_upload_url', '', 'string');\n    };\n\n    var getUploadHandler = function getUploadHandler(editor) {\n      return editor.getParam('images_upload_handler', undefined, 'function');\n    };\n\n    var getUploadBasePath = function getUploadBasePath(editor) {\n      return editor.getParam('images_upload_base_path', undefined, 'string');\n    };\n\n    var getUploadCredentials = function getUploadCredentials(editor) {\n      return editor.getParam('images_upload_credentials', false, 'boolean');\n    };\n\n    var Settings = {\n      hasDimensions: hasDimensions,\n      hasUploadTab: hasUploadTab,\n      hasAdvTab: hasAdvTab,\n      getPrependUrl: getPrependUrl,\n      getClassList: getClassList,\n      hasDescription: hasDescription,\n      hasImageTitle: hasImageTitle,\n      hasImageCaption: hasImageCaption,\n      getImageList: getImageList,\n      hasUploadUrl: hasUploadUrl,\n      hasUploadHandler: hasUploadHandler,\n      getUploadUrl: getUploadUrl,\n      getUploadHandler: getUploadHandler,\n      getUploadBasePath: getUploadBasePath,\n      getUploadCredentials: getUploadCredentials\n    };\n\n    var parseIntAndGetMax = function parseIntAndGetMax(val1, val2) {\n      return Math.max(parseInt(val1, 10), parseInt(val2, 10));\n    };\n\n    var parseIntAndGetMin = function parseIntAndGetMin(val1, val2) {\n      return Math.min(parseInt(val1, 10), parseInt(val2, 10));\n    };\n\n    var getImageSize = function getImageSize(url, callback) {\n      var img = domGlobals.document.createElement('img');\n\n      var done = function done(dimensions) {\n        if (img.parentNode) {\n          img.parentNode.removeChild(img);\n        }\n\n        callback(dimensions);\n      };\n\n      img.onload = function () {\n        var width = 0;\n        var height = 0;\n        var pwidth = parseIntAndGetMax(img.width, img.clientWidth);\n        var pheight = parseIntAndGetMax(img.height, img.clientHeight);\n        var bili = pwidth / pheight;\n\n        if (pwidth > 800) {\n          width = parseIntAndGetMin(pwidth, 500);\n          height = width / bili;\n        } else {\n          width = pwidth;\n          height = pheight;\n        }\n\n        var dimensions = {\n          width: width,\n          height: height\n        };\n        done(Result.value(dimensions));\n      };\n\n      img.onerror = function () {\n        done(Result.error('Failed to get image dimensions for: ' + url));\n      };\n\n      var style = img.style;\n      style.visibility = 'hidden';\n      style.position = 'fixed';\n      style.bottom = style.left = '0px';\n      style.width = style.height = 'auto';\n      domGlobals.document.body.appendChild(img);\n      img.src = url;\n    };\n\n    var removePixelSuffix = function removePixelSuffix(value) {\n      if (value) {\n        value = value.replace(/px$/, '');\n      }\n\n      return value;\n    };\n\n    var addPixelSuffix = function addPixelSuffix(value) {\n      if (value.length > 0 && /^[0-9]+$/.test(value)) {\n        value += 'px';\n      }\n\n      return value;\n    };\n\n    var mergeMargins = function mergeMargins(css) {\n      if (css.margin) {\n        var splitMargin = String(css.margin).split(' ');\n\n        switch (splitMargin.length) {\n          case 1:\n            css['margin-top'] = css['margin-top'] || splitMargin[0];\n            css['margin-right'] = css['margin-right'] || splitMargin[0];\n            css['margin-bottom'] = css['margin-bottom'] || splitMargin[0];\n            css['margin-left'] = css['margin-left'] || splitMargin[0];\n            break;\n\n          case 2:\n            css['margin-top'] = css['margin-top'] || splitMargin[0];\n            css['margin-right'] = css['margin-right'] || splitMargin[1];\n            css['margin-bottom'] = css['margin-bottom'] || splitMargin[0];\n            css['margin-left'] = css['margin-left'] || splitMargin[1];\n            break;\n\n          case 3:\n            css['margin-top'] = css['margin-top'] || splitMargin[0];\n            css['margin-right'] = css['margin-right'] || splitMargin[1];\n            css['margin-bottom'] = css['margin-bottom'] || splitMargin[2];\n            css['margin-left'] = css['margin-left'] || splitMargin[1];\n            break;\n\n          case 4:\n            css['margin-top'] = css['margin-top'] || splitMargin[0];\n            css['margin-right'] = css['margin-right'] || splitMargin[1];\n            css['margin-bottom'] = css['margin-bottom'] || splitMargin[2];\n            css['margin-left'] = css['margin-left'] || splitMargin[3];\n        }\n\n        delete css.margin;\n      }\n\n      return css;\n    };\n\n    var createImageList = function createImageList(editor, callback) {\n      var imageList = Settings.getImageList(editor);\n\n      if (typeof imageList === 'string') {\n        global$2.send({\n          url: imageList,\n          success: function success(text) {\n            callback(JSON.parse(text));\n          }\n        });\n      } else if (typeof imageList === 'function') {\n        imageList(callback);\n      } else {\n        callback(imageList);\n      }\n    };\n\n    var waitLoadImage = function waitLoadImage(editor, data, imgElm) {\n      var selectImage = function selectImage() {\n        imgElm.onload = imgElm.onerror = null;\n\n        if (editor.selection) {\n          editor.selection.select(imgElm);\n          editor.nodeChanged();\n        }\n      };\n\n      imgElm.onload = function () {\n        if (!data.width && !data.height && Settings.hasDimensions(editor)) {\n          editor.dom.setAttribs(imgElm, {\n            width: String(imgElm.clientWidth),\n            height: String(imgElm.clientHeight)\n          });\n        }\n\n        selectImage();\n      };\n\n      imgElm.onerror = selectImage;\n    };\n\n    var blobToDataUri = function blobToDataUri(blob) {\n      return new global$1(function (resolve, reject) {\n        var reader = FileReader();\n\n        reader.onload = function () {\n          resolve(reader.result);\n        };\n\n        reader.onerror = function () {\n          reject(reader.error.message);\n        };\n\n        reader.readAsDataURL(blob);\n      });\n    };\n\n    var isPlaceholderImage = function isPlaceholderImage(imgElm) {\n      return imgElm.nodeName === 'IMG' && (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\n    };\n\n    var Utils = {\n      getImageSize: getImageSize,\n      removePixelSuffix: removePixelSuffix,\n      addPixelSuffix: addPixelSuffix,\n      mergeMargins: mergeMargins,\n      createImageList: createImageList,\n      waitLoadImage: waitLoadImage,\n      blobToDataUri: blobToDataUri,\n      isPlaceholderImage: isPlaceholderImage\n    };\n    var global$3 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n    var DOM = global$3.DOM;\n\n    var getHspace = function getHspace(image) {\n      if (image.style.marginLeft && image.style.marginRight && image.style.marginLeft === image.style.marginRight) {\n        return Utils.removePixelSuffix(image.style.marginLeft);\n      } else {\n        return '';\n      }\n    };\n\n    var getVspace = function getVspace(image) {\n      if (image.style.marginTop && image.style.marginBottom && image.style.marginTop === image.style.marginBottom) {\n        return Utils.removePixelSuffix(image.style.marginTop);\n      } else {\n        return '';\n      }\n    };\n\n    var getBorder = function getBorder(image) {\n      if (image.style.borderWidth) {\n        return Utils.removePixelSuffix(image.style.borderWidth);\n      } else {\n        return '';\n      }\n    };\n\n    var getAttrib = function getAttrib(image, name) {\n      if (image.hasAttribute(name)) {\n        return image.getAttribute(name);\n      } else {\n        return '';\n      }\n    };\n\n    var getStyle = function getStyle(image, name) {\n      return image.style[name] ? image.style[name] : '';\n    };\n\n    var hasCaption = function hasCaption(image) {\n      return image.parentNode !== null && image.parentNode.nodeName === 'FIGURE';\n    };\n\n    var setAttrib = function setAttrib(image, name, value) {\n      image.setAttribute(name, value);\n    };\n\n    var wrapInFigure = function wrapInFigure(image) {\n      var figureElm = DOM.create('figure', {\n        class: 'image'\n      });\n      DOM.insertAfter(figureElm, image);\n      figureElm.appendChild(image);\n      figureElm.appendChild(DOM.create('figcaption', {\n        contentEditable: 'true'\n      }, 'Caption'));\n      figureElm.contentEditable = 'false';\n    };\n\n    var removeFigure = function removeFigure(image) {\n      var figureElm = image.parentNode;\n      DOM.insertAfter(image, figureElm);\n      DOM.remove(figureElm);\n    };\n\n    var toggleCaption = function toggleCaption(image) {\n      if (hasCaption(image)) {\n        removeFigure(image);\n      } else {\n        wrapInFigure(image);\n      }\n    };\n\n    var normalizeStyle = function normalizeStyle(image, normalizeCss) {\n      var attrValue = image.getAttribute('style');\n      var value = normalizeCss(attrValue !== null ? attrValue : '');\n\n      if (value.length > 0) {\n        image.setAttribute('style', value);\n        image.setAttribute('data-mce-style', value);\n      } else {\n        image.removeAttribute('style');\n      }\n    };\n\n    var setSize = function setSize(name, normalizeCss) {\n      return function (image, name, value) {\n        if (image.style[name]) {\n          image.style[name] = Utils.addPixelSuffix(value);\n          normalizeStyle(image, normalizeCss);\n        } else {\n          setAttrib(image, name, value);\n        }\n      };\n    };\n\n    var getSize = function getSize(image, name) {\n      if (image.style[name]) {\n        return Utils.removePixelSuffix(image.style[name]);\n      } else {\n        return getAttrib(image, name);\n      }\n    };\n\n    var setHspace = function setHspace(image, value) {\n      var pxValue = Utils.addPixelSuffix(value);\n      image.style.marginLeft = pxValue;\n      image.style.marginRight = pxValue;\n    };\n\n    var setVspace = function setVspace(image, value) {\n      var pxValue = Utils.addPixelSuffix(value);\n      image.style.marginTop = pxValue;\n      image.style.marginBottom = pxValue;\n    };\n\n    var setBorder = function setBorder(image, value) {\n      var pxValue = Utils.addPixelSuffix(value);\n      image.style.borderWidth = pxValue;\n    };\n\n    var setBorderStyle = function setBorderStyle(image, value) {\n      image.style.borderStyle = value;\n    };\n\n    var getBorderStyle = function getBorderStyle(image) {\n      return getStyle(image, 'borderStyle');\n    };\n\n    var isFigure = function isFigure(elm) {\n      return elm.nodeName === 'FIGURE';\n    };\n\n    var isImage = function isImage(elm) {\n      return elm.nodeName === 'IMG';\n    };\n\n    var defaultData = function defaultData() {\n      return {\n        src: '',\n        alt: '',\n        title: '',\n        width: '',\n        height: '',\n        class: '',\n        style: '',\n        caption: false,\n        hspace: '',\n        vspace: '',\n        border: '',\n        borderStyle: ''\n      };\n    };\n\n    var getStyleValue = function getStyleValue(normalizeCss, data) {\n      var image = domGlobals.document.createElement('img');\n      setAttrib(image, 'style', data.style);\n\n      if (getHspace(image) || data.hspace !== '') {\n        setHspace(image, data.hspace);\n      }\n\n      if (getVspace(image) || data.vspace !== '') {\n        setVspace(image, data.vspace);\n      }\n\n      if (getBorder(image) || data.border !== '') {\n        setBorder(image, data.border);\n      }\n\n      if (getBorderStyle(image) || data.borderStyle !== '') {\n        setBorderStyle(image, data.borderStyle);\n      }\n\n      return normalizeCss(image.getAttribute('style'));\n    };\n\n    var create = function create(normalizeCss, data) {\n      var image = domGlobals.document.createElement('img');\n      write(normalizeCss, merge(data, {\n        caption: false\n      }), image);\n      setAttrib(image, 'alt', data.alt);\n\n      if (data.caption) {\n        var figure = DOM.create('figure', {\n          class: 'image'\n        });\n        figure.appendChild(image);\n        figure.appendChild(DOM.create('figcaption', {\n          contentEditable: 'true'\n        }, 'Caption'));\n        figure.contentEditable = 'false';\n        return figure;\n      } else {\n        return image;\n      }\n    };\n\n    var read = function read(normalizeCss, image) {\n      return {\n        src: getAttrib(image, 'src'),\n        alt: getAttrib(image, 'alt'),\n        title: getAttrib(image, 'title'),\n        width: getSize(image, 'width'),\n        height: getSize(image, 'height'),\n        class: getAttrib(image, 'class'),\n        style: normalizeCss(getAttrib(image, 'style')),\n        caption: hasCaption(image),\n        hspace: getHspace(image),\n        vspace: getVspace(image),\n        border: getBorder(image),\n        borderStyle: getStyle(image, 'borderStyle')\n      };\n    };\n\n    var updateProp = function updateProp(image, oldData, newData, name, set) {\n      if (newData[name] !== oldData[name]) {\n        set(image, name, newData[name]);\n      }\n    };\n\n    var normalized = function normalized(set, normalizeCss) {\n      return function (image, name, value) {\n        set(image, value);\n        normalizeStyle(image, normalizeCss);\n      };\n    };\n\n    var write = function write(normalizeCss, newData, image) {\n      var oldData = read(normalizeCss, image);\n      updateProp(image, oldData, newData, 'caption', function (image, _name, _value) {\n        return toggleCaption(image);\n      });\n      updateProp(image, oldData, newData, 'src', setAttrib);\n      updateProp(image, oldData, newData, 'alt', setAttrib);\n      updateProp(image, oldData, newData, 'title', setAttrib);\n      updateProp(image, oldData, newData, 'width', setSize('width', normalizeCss));\n      updateProp(image, oldData, newData, 'height', setSize('height', normalizeCss));\n      updateProp(image, oldData, newData, 'class', setAttrib);\n      updateProp(image, oldData, newData, 'style', normalized(function (image, value) {\n        return setAttrib(image, 'style', value);\n      }, normalizeCss));\n      updateProp(image, oldData, newData, 'hspace', normalized(setHspace, normalizeCss));\n      updateProp(image, oldData, newData, 'vspace', normalized(setVspace, normalizeCss));\n      updateProp(image, oldData, newData, 'border', normalized(setBorder, normalizeCss));\n      updateProp(image, oldData, newData, 'borderStyle', normalized(setBorderStyle, normalizeCss));\n    };\n\n    var normalizeCss = function normalizeCss(editor, cssText) {\n      var css = editor.dom.styles.parse(cssText);\n      var mergedCss = Utils.mergeMargins(css);\n      var compressed = editor.dom.styles.parse(editor.dom.styles.serialize(mergedCss));\n      return editor.dom.styles.serialize(compressed);\n    };\n\n    var getSelectedImage = function getSelectedImage(editor) {\n      var imgElm = editor.selection.getNode();\n      var figureElm = editor.dom.getParent(imgElm, 'figure.image');\n\n      if (figureElm) {\n        return editor.dom.select('img', figureElm)[0];\n      }\n\n      if (imgElm && (imgElm.nodeName !== 'IMG' || Utils.isPlaceholderImage(imgElm))) {\n        return null;\n      }\n\n      return imgElm;\n    };\n\n    var splitTextBlock = function splitTextBlock(editor, figure) {\n      var dom = editor.dom;\n      var textBlock = dom.getParent(figure.parentNode, function (node) {\n        return editor.schema.getTextBlockElements()[node.nodeName];\n      }, editor.getBody());\n\n      if (textBlock) {\n        return dom.split(textBlock, figure);\n      } else {\n        return figure;\n      }\n    };\n\n    var readImageDataFromSelection = function readImageDataFromSelection(editor) {\n      var image = getSelectedImage(editor);\n      return image ? read(function (css) {\n        return normalizeCss(editor, css);\n      }, image) : defaultData();\n    };\n\n    var insertImageAtCaret = function insertImageAtCaret(editor, data) {\n      var elm = create(function (css) {\n        return normalizeCss(editor, css);\n      }, data);\n      editor.dom.setAttrib(elm, 'data-mce-id', '__mcenew');\n      editor.focus();\n      editor.selection.setContent(elm.outerHTML);\n      var insertedElm = editor.dom.select('*[data-mce-id=\"__mcenew\"]')[0];\n      editor.dom.setAttrib(insertedElm, 'data-mce-id', null);\n\n      if (isFigure(insertedElm)) {\n        var figure = splitTextBlock(editor, insertedElm);\n        editor.selection.select(figure);\n      } else {\n        editor.selection.select(insertedElm);\n      }\n    };\n\n    var syncSrcAttr = function syncSrcAttr(editor, image) {\n      editor.dom.setAttrib(image, 'src', image.getAttribute('src'));\n    };\n\n    var deleteImage = function deleteImage(editor, image) {\n      if (image) {\n        var elm = editor.dom.is(image.parentNode, 'figure.image') ? image.parentNode : image;\n        editor.dom.remove(elm);\n        editor.focus();\n        editor.nodeChanged();\n\n        if (editor.dom.isEmpty(editor.getBody())) {\n          editor.setContent('');\n          editor.selection.setCursorLocation();\n        }\n      }\n    };\n\n    var writeImageDataToSelection = function writeImageDataToSelection(editor, data) {\n      var image = getSelectedImage(editor);\n      write(function (css) {\n        return normalizeCss(editor, css);\n      }, data, image);\n      syncSrcAttr(editor, image);\n\n      if (isFigure(image.parentNode)) {\n        var figure = image.parentNode;\n        splitTextBlock(editor, figure);\n        editor.selection.select(image.parentNode);\n      } else {\n        editor.selection.select(image);\n        Utils.waitLoadImage(editor, data, image);\n      }\n    };\n\n    var insertOrUpdateImage = function insertOrUpdateImage(editor, data) {\n      var image = getSelectedImage(editor);\n\n      if (image) {\n        if (data.src) {\n          writeImageDataToSelection(editor, data);\n        } else {\n          deleteImage(editor, image);\n        }\n      } else if (data.src) {\n        insertImageAtCaret(editor, data);\n      }\n    };\n\n    var findMap = function findMap(arr, f) {\n      for (var i = 0; i < arr.length; i++) {\n        var r = f(arr[i], i);\n\n        if (r.isSome()) {\n          return r;\n        }\n      }\n\n      return Option.none();\n    };\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getValue = function getValue(item) {\n      return isString(item.value) ? item.value : '';\n    };\n\n    var sanitizeList = function sanitizeList(list, extractValue) {\n      var out = [];\n      global$4.each(list, function (item) {\n        var text = isString(item.text) ? item.text : isString(item.title) ? item.title : '';\n\n        if (item.menu !== undefined) {\n          var items = sanitizeList(item.menu, extractValue);\n          out.push({\n            text: text,\n            items: items\n          });\n        } else {\n          var value = extractValue(item);\n          out.push({\n            text: text,\n            value: value\n          });\n        }\n      });\n      return out;\n    };\n\n    var sanitizer = function sanitizer(extracter) {\n      if (extracter === void 0) {\n        extracter = getValue;\n      }\n\n      return function (list) {\n        if (list) {\n          return Option.from(list).map(function (list) {\n            return sanitizeList(list, extracter);\n          });\n        } else {\n          return Option.none();\n        }\n      };\n    };\n\n    var sanitize = function sanitize(list) {\n      return sanitizer(getValue)(list);\n    };\n\n    var isGroup = function isGroup(item) {\n      return Object.prototype.hasOwnProperty.call(item, 'items');\n    };\n\n    var findEntryDelegate = function findEntryDelegate(list, value) {\n      return findMap(list, function (item) {\n        if (isGroup(item)) {\n          return findEntryDelegate(item.items, value);\n        } else if (item.value === value) {\n          return Option.some(item);\n        } else {\n          return Option.none();\n        }\n      });\n    };\n\n    var findEntry = function findEntry(optList, value) {\n      return optList.bind(function (list) {\n        return findEntryDelegate(list, value);\n      });\n    };\n\n    var ListUtils = {\n      sanitizer: sanitizer,\n      sanitize: sanitize,\n      findEntry: findEntry\n    };\n\n    function XMLHttpRequest() {\n      var f = Global$1.getOrDie('XMLHttpRequest');\n      return new f();\n    }\n\n    var pathJoin = function pathJoin(path1, path2) {\n      if (path1) {\n        return path1.replace(/\\/$/, '') + '/' + path2.replace(/^\\//, '');\n      }\n\n      return path2;\n    };\n\n    function Uploader(settings) {\n      var defaultHandler = function defaultHandler(blobInfo, success, failure, progress) {\n        var xhr, formData;\n        xhr = XMLHttpRequest();\n        xhr.open('POST', settings.url);\n        xhr.withCredentials = settings.credentials;\n\n        xhr.upload.onprogress = function (e) {\n          progress(e.loaded / e.total * 100);\n        };\n\n        xhr.onerror = function () {\n          failure('Image upload failed due to a XHR Transport error. Code: ' + xhr.status);\n        };\n\n        xhr.onload = function () {\n          var json;\n\n          if (xhr.status < 200 || xhr.status >= 300) {\n            failure('HTTP Error: ' + xhr.status);\n            return;\n          }\n\n          json = JSON.parse(xhr.responseText);\n\n          if (!json || typeof json.location !== 'string') {\n            failure('Invalid JSON: ' + xhr.responseText);\n            return;\n          }\n\n          success(pathJoin(settings.basePath, json.location));\n        };\n\n        formData = new domGlobals.FormData();\n        formData.append('file', blobInfo.blob(), blobInfo.filename());\n        xhr.send(formData);\n      };\n\n      var uploadBlob = function uploadBlob(blobInfo, handler) {\n        return new global$1(function (resolve, reject) {\n          try {\n            handler(blobInfo, resolve, reject, noop);\n          } catch (ex) {\n            reject(ex.message);\n          }\n        });\n      };\n\n      var isDefaultHandler = function isDefaultHandler(handler) {\n        return handler === defaultHandler;\n      };\n\n      var upload = function upload(blobInfo) {\n        return !settings.url && isDefaultHandler(settings.handler) ? global$1.reject('Upload url missing from the settings.') : uploadBlob(blobInfo, settings.handler);\n      };\n\n      settings = global$4.extend({\n        credentials: false,\n        handler: defaultHandler\n      }, settings);\n      return {\n        upload: upload\n      };\n    }\n\n    var makeTab$1 = function makeTab$1(info) {\n      return {\n        title: 'Advanced',\n        name: 'advanced',\n        items: [{\n          type: 'input',\n          label: 'Style',\n          name: 'style'\n        }, {\n          type: 'grid',\n          columns: 2,\n          items: [{\n            type: 'input',\n            label: 'Vertical space',\n            name: 'vspace'\n          }, {\n            type: 'input',\n            label: 'Horizontal space',\n            name: 'hspace'\n          }, {\n            type: 'input',\n            label: 'Border width',\n            name: 'border'\n          }, {\n            type: 'selectbox',\n            name: 'borderstyle',\n            label: 'Border style',\n            items: [{\n              text: 'Select...',\n              value: ''\n            }, {\n              text: 'Solid',\n              value: 'solid'\n            }, {\n              text: 'Dotted',\n              value: 'dotted'\n            }, {\n              text: 'Dashed',\n              value: 'dashed'\n            }, {\n              text: 'Double',\n              value: 'double'\n            }, {\n              text: 'Groove',\n              value: 'groove'\n            }, {\n              text: 'Ridge',\n              value: 'ridge'\n            }, {\n              text: 'Inset',\n              value: 'inset'\n            }, {\n              text: 'Outset',\n              value: 'outset'\n            }, {\n              text: 'None',\n              value: 'none'\n            }, {\n              text: 'Hidden',\n              value: 'hidden'\n            }]\n          }]\n        }]\n      };\n    };\n\n    var AdvTab = {\n      makeTab: makeTab$1\n    };\n\n    var collect = function collect(editor) {\n      var urlListSanitizer = ListUtils.sanitizer(function (item) {\n        return editor.convertURL(item.value || item.url, 'src');\n      });\n      var futureImageList = Future.nu(function (completer) {\n        Utils.createImageList(editor, function (imageList) {\n          completer(urlListSanitizer(imageList).map(function (items) {\n            return flatten([[{\n              text: 'None',\n              value: ''\n            }], items]);\n          }));\n        });\n      });\n      var classList = ListUtils.sanitize(Settings.getClassList(editor));\n      var hasAdvTab = Settings.hasAdvTab(editor);\n      var hasUploadTab = Settings.hasUploadTab(editor);\n      var hasUploadUrl = Settings.hasUploadUrl(editor);\n      var hasUploadHandler = Settings.hasUploadHandler(editor);\n      var image = readImageDataFromSelection(editor);\n      var hasDescription = Settings.hasDescription(editor);\n      var hasImageTitle = Settings.hasImageTitle(editor);\n      var hasDimensions = Settings.hasDimensions(editor);\n      var hasImageCaption = Settings.hasImageCaption(editor);\n      var url = Settings.getUploadUrl(editor);\n      var basePath = Settings.getUploadBasePath(editor);\n      var credentials = Settings.getUploadCredentials(editor);\n      var handler = Settings.getUploadHandler(editor);\n      var prependURL = Option.some(Settings.getPrependUrl(editor)).filter(function (preUrl) {\n        return isString(preUrl) && preUrl.length > 0;\n      });\n      return futureImageList.map(function (imageList) {\n        return {\n          image: image,\n          imageList: imageList,\n          classList: classList,\n          hasAdvTab: hasAdvTab,\n          hasUploadTab: hasUploadTab,\n          hasUploadUrl: hasUploadUrl,\n          hasUploadHandler: hasUploadHandler,\n          hasDescription: hasDescription,\n          hasImageTitle: hasImageTitle,\n          hasDimensions: hasDimensions,\n          hasImageCaption: hasImageCaption,\n          url: url,\n          basePath: basePath,\n          credentials: credentials,\n          handler: handler,\n          prependURL: prependURL\n        };\n      });\n    };\n\n    var makeTab$2 = function makeTab$2(info) {\n      var items = [{\n        type: 'dropzone',\n        name: 'fileinput'\n      }];\n      return {\n        title: 'Upload',\n        name: 'upload',\n        items: items\n      };\n    };\n\n    var UploadTab = {\n      makeTab: makeTab$2\n    };\n\n    var createState = function createState(info) {\n      return {\n        prevImage: ListUtils.findEntry(info.imageList, info.image.src),\n        prevAlt: info.image.alt,\n        open: true\n      };\n    };\n\n    var fromImageData = function fromImageData(image) {\n      return {\n        src: {\n          value: image.src,\n          meta: {}\n        },\n        images: image.src,\n        alt: image.alt,\n        title: image.title,\n        dimensions: {\n          width: image.width,\n          height: image.height\n        },\n        classes: image.class,\n        caption: image.caption,\n        style: image.style,\n        vspace: image.vspace,\n        border: image.border,\n        hspace: image.hspace,\n        borderstyle: image.borderStyle,\n        fileinput: []\n      };\n    };\n\n    var toImageData = function toImageData(data) {\n      return {\n        src: data.src.value,\n        alt: data.alt,\n        title: data.title,\n        width: data.dimensions.width,\n        height: data.dimensions.height,\n        class: data.classes,\n        style: data.style,\n        caption: data.caption,\n        hspace: data.hspace,\n        vspace: data.vspace,\n        border: data.border,\n        borderStyle: data.borderstyle\n      };\n    };\n\n    var addPrependUrl2 = function addPrependUrl2(info, srcURL) {\n      if (!/^(?:[a-zA-Z]+:)?\\/\\//.test(srcURL)) {\n        return info.prependURL.bind(function (prependUrl) {\n          if (srcURL.substring(0, prependUrl.length) !== prependUrl) {\n            return Option.some(prependUrl + srcURL);\n          }\n\n          return Option.none();\n        });\n      }\n\n      return Option.none();\n    };\n\n    var addPrependUrl = function addPrependUrl(info, api) {\n      var data = api.getData();\n      addPrependUrl2(info, data.src.value).each(function (srcURL) {\n        api.setData({\n          src: {\n            value: srcURL,\n            meta: data.src.meta\n          }\n        });\n      });\n    };\n\n    var formFillFromMeta2 = function formFillFromMeta2(info, data, meta) {\n      if (info.hasDescription && isString(meta.alt)) {\n        data.alt = meta.alt;\n      }\n\n      if (info.hasImageTitle && isString(meta.title)) {\n        data.title = meta.title;\n      }\n\n      if (info.hasDimensions) {\n        if (isString(meta.width)) {\n          data.dimensions.width = meta.width;\n        }\n\n        if (isString(meta.height)) {\n          data.dimensions.height = meta.height;\n        }\n      }\n\n      if (isString(meta.class)) {\n        ListUtils.findEntry(info.classList, meta.class).each(function (entry) {\n          data.classes = entry.value;\n        });\n      }\n\n      if (info.hasImageCaption) {\n        if (isBoolean(meta.caption)) {\n          data.caption = meta.caption;\n        }\n      }\n\n      if (info.hasAdvTab) {\n        if (isString(meta.vspace)) {\n          data.vspace = meta.vspace;\n        }\n\n        if (isString(meta.border)) {\n          data.border = meta.border;\n        }\n\n        if (isString(meta.hspace)) {\n          data.hspace = meta.hspace;\n        }\n\n        if (isString(meta.borderstyle)) {\n          data.borderstyle = meta.borderstyle;\n        }\n      }\n    };\n\n    var formFillFromMeta = function formFillFromMeta(info, api) {\n      var data = api.getData();\n      var meta = data.src.meta;\n\n      if (meta !== undefined) {\n        var newData = deepMerge({}, data);\n        formFillFromMeta2(info, newData, meta);\n        api.setData(newData);\n      }\n    };\n\n    var calculateImageSize = function calculateImageSize(helpers, info, state, api) {\n      var data = api.getData();\n      var url = data.src.value;\n      var meta = data.src.meta || {};\n\n      if (!meta.width && !meta.height && info.hasDimensions) {\n        helpers.imageSize(url).get(function (result) {\n          result.each(function (size) {\n            if (state.open) {\n              api.setData({\n                dimensions: size\n              });\n            }\n          });\n        });\n      }\n    };\n\n    var updateImagesDropdown = function updateImagesDropdown(info, state, api) {\n      var data = api.getData();\n      var image = ListUtils.findEntry(info.imageList, data.src.value);\n      state.prevImage = image;\n      api.setData({\n        images: image.map(function (entry) {\n          return entry.value;\n        }).getOr('')\n      });\n    };\n\n    var changeSrc = function changeSrc(helpers, info, state, api) {\n      addPrependUrl(info, api);\n      formFillFromMeta(info, api);\n      calculateImageSize(helpers, info, state, api);\n      updateImagesDropdown(info, state, api);\n    };\n\n    var changeImages = function changeImages(helpers, info, state, api) {\n      var data = api.getData();\n      var image = ListUtils.findEntry(info.imageList, data.images);\n      image.each(function (img) {\n        var updateAlt = data.alt === '' || state.prevImage.map(function (image) {\n          return image.text === data.alt;\n        }).getOr(false);\n\n        if (updateAlt) {\n          if (img.value === '') {\n            api.setData({\n              src: img,\n              alt: state.prevAlt\n            });\n          } else {\n            api.setData({\n              src: img,\n              alt: img.text\n            });\n          }\n        } else {\n          api.setData({\n            src: img\n          });\n        }\n      });\n      state.prevImage = image;\n      changeSrc(helpers, info, state, api);\n    };\n\n    var calcVSpace = function calcVSpace(css) {\n      var matchingTopBottom = css['margin-top'] && css['margin-bottom'] && css['margin-top'] === css['margin-bottom'];\n      return matchingTopBottom ? Utils.removePixelSuffix(String(css['margin-top'])) : '';\n    };\n\n    var calcHSpace = function calcHSpace(css) {\n      var matchingLeftRight = css['margin-right'] && css['margin-left'] && css['margin-right'] === css['margin-left'];\n      return matchingLeftRight ? Utils.removePixelSuffix(String(css['margin-right'])) : '';\n    };\n\n    var calcBorderWidth = function calcBorderWidth(css) {\n      return css['border-width'] ? Utils.removePixelSuffix(String(css['border-width'])) : '';\n    };\n\n    var calcBorderStyle = function calcBorderStyle(css) {\n      return css['border-style'] ? String(css['border-style']) : '';\n    };\n\n    var calcStyle = function calcStyle(parseStyle, serializeStyle, css) {\n      return serializeStyle(parseStyle(serializeStyle(css)));\n    };\n\n    var changeStyle2 = function changeStyle2(parseStyle, serializeStyle, data) {\n      var css = Utils.mergeMargins(parseStyle(data.style));\n      var dataCopy = deepMerge({}, data);\n      dataCopy.vspace = calcVSpace(css);\n      dataCopy.hspace = calcHSpace(css);\n      dataCopy.border = calcBorderWidth(css);\n      dataCopy.borderstyle = calcBorderStyle(css);\n      dataCopy.style = calcStyle(parseStyle, serializeStyle, css);\n      return dataCopy;\n    };\n\n    var changeStyle = function changeStyle(helpers, api) {\n      var data = api.getData();\n      var newData = changeStyle2(helpers.parseStyle, helpers.serializeStyle, data);\n      api.setData(newData);\n    };\n\n    var changeAStyle = function changeAStyle(helpers, info, api) {\n      var data = deepMerge(fromImageData(info.image), api.getData());\n      var style = getStyleValue(helpers.normalizeCss, toImageData(data));\n      api.setData({\n        style: style\n      });\n    };\n\n    var changeFileInput = function changeFileInput(helpers, info, state, api) {\n      var data = api.getData();\n      api.block('Uploading image');\n      head(data.fileinput).fold(function () {\n        api.unblock();\n      }, function (file) {\n        var blobUri = URL.createObjectURL(file);\n        var uploader = Uploader({\n          url: info.url,\n          basePath: info.basePath,\n          credentials: info.credentials,\n          handler: info.handler\n        });\n\n        var finalize = function finalize() {\n          api.unblock();\n          URL.revokeObjectURL(blobUri);\n        };\n\n        Utils.blobToDataUri(file).then(function (dataUrl) {\n          var blobInfo = helpers.createBlobCache(file, blobUri, dataUrl);\n          uploader.upload(blobInfo).then(function (url) {\n            api.setData({\n              src: {\n                value: url,\n                meta: {}\n              }\n            });\n            api.showTab('general');\n            changeSrc(helpers, info, state, api);\n            finalize();\n          }).catch(function (err) {\n            finalize();\n            helpers.alertErr(api, err);\n          });\n        });\n      });\n    };\n\n    var changeHandler = function changeHandler(helpers, info, state) {\n      return function (api, evt) {\n        if (evt.name === 'src') {\n          changeSrc(helpers, info, state, api);\n        } else if (evt.name === 'images') {\n          changeImages(helpers, info, state, api);\n        } else if (evt.name === 'alt') {\n          state.prevAlt = api.getData().alt;\n        } else if (evt.name === 'style') {\n          changeStyle(helpers, api);\n        } else if (evt.name === 'vspace' || evt.name === 'hspace' || evt.name === 'border' || evt.name === 'borderstyle') {\n          changeAStyle(helpers, info, api);\n        } else if (evt.name === 'fileinput') {\n          changeFileInput(helpers, info, state, api);\n        }\n      };\n    };\n\n    var closeHandler = function closeHandler(state) {\n      return function () {\n        state.open = false;\n      };\n    };\n\n    var makeDialogBody = function makeDialogBody(info) {\n      if (info.hasAdvTab || info.hasUploadUrl || info.hasUploadHandler) {\n        var tabPanel = {\n          type: 'tabpanel',\n          tabs: flatten([[MainTab.makeTab(info)], info.hasAdvTab ? [AdvTab.makeTab(info)] : [], info.hasUploadTab && (info.hasUploadUrl || info.hasUploadHandler) ? [UploadTab.makeTab(info)] : []])\n        };\n        return tabPanel;\n      } else {\n        var panel = {\n          type: 'panel',\n          items: MainTab.makeItems(info)\n        };\n        return panel;\n      }\n    };\n\n    var makeDialog = function makeDialog(helpers) {\n      return function (info) {\n        var state = createState(info);\n        return {\n          title: 'Insert/Edit Image',\n          size: 'normal',\n          body: makeDialogBody(info),\n          buttons: [{\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          }, {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }],\n          initialData: fromImageData(info.image),\n          onSubmit: helpers.onSubmit(info),\n          onChange: changeHandler(helpers, info, state),\n          onClose: closeHandler(state)\n        };\n      };\n    };\n\n    var submitHandler = function submitHandler(editor) {\n      return function (info) {\n        return function (api) {\n          var data = deepMerge(fromImageData(info.image), api.getData());\n          editor.undoManager.transact(function () {\n            insertOrUpdateImage(editor, toImageData(data));\n          });\n          editor.editorUpload.uploadImagesAuto();\n          api.close();\n        };\n      };\n    };\n\n    var imageSize = function imageSize(editor) {\n      return function (url) {\n        return FutureResult.nu(function (completer) {\n          Utils.getImageSize(editor.documentBaseURI.toAbsolute(url), function (data) {\n            var result = data.map(function (dimensions) {\n              return {\n                width: String(dimensions.width),\n                height: String(dimensions.height)\n              };\n            });\n            completer(result);\n          });\n        });\n      };\n    };\n\n    var createBlobCache = function createBlobCache(editor) {\n      return function (file, blobUri, dataUrl) {\n        return editor.editorUpload.blobCache.create({\n          blob: file,\n          blobUri: blobUri,\n          name: file.name ? file.name.replace(/\\.[^\\.]+$/, '') : null,\n          base64: dataUrl.split(',')[1]\n        });\n      };\n    };\n\n    var alertErr = function alertErr(editor) {\n      return function (api, message) {\n        editor.windowManager.alert(message, api.close);\n      };\n    };\n\n    var normalizeCss$1 = function normalizeCss$1(editor) {\n      return function (cssText) {\n        return normalizeCss(editor, cssText);\n      };\n    };\n\n    var parseStyle = function parseStyle(editor) {\n      return function (cssText) {\n        return editor.dom.parseStyle(cssText);\n      };\n    };\n\n    var serializeStyle = function serializeStyle(editor) {\n      return function (stylesArg, name) {\n        return editor.dom.serializeStyle(stylesArg, name);\n      };\n    };\n\n    var Dialog = function Dialog(editor) {\n      var helpers = {\n        onSubmit: submitHandler(editor),\n        imageSize: imageSize(editor),\n        createBlobCache: createBlobCache(editor),\n        alertErr: alertErr(editor),\n        normalizeCss: normalizeCss$1(editor),\n        parseStyle: parseStyle(editor),\n        serializeStyle: serializeStyle(editor)\n      };\n\n      var open = function open() {\n        return collect(editor).map(makeDialog(helpers)).get(function (spec) {\n          editor.windowManager.open(spec);\n        });\n      };\n\n      return {\n        open: open\n      };\n    };\n\n    var register = function register(editor) {\n      editor.addCommand('mceImage', Dialog(editor).open);\n    };\n\n    var Commands = {\n      register: register\n    };\n\n    var hasImageClass = function hasImageClass(node) {\n      var className = node.attr('class');\n      return className && /\\bimage\\b/.test(className);\n    };\n\n    var toggleContentEditableState = function toggleContentEditableState(state) {\n      return function (nodes) {\n        var i = nodes.length;\n\n        var toggleContentEditable = function toggleContentEditable(node) {\n          node.attr('contenteditable', state ? 'true' : null);\n        };\n\n        while (i--) {\n          var node = nodes[i];\n\n          if (hasImageClass(node)) {\n            node.attr('contenteditable', state ? 'false' : null);\n            global$4.each(node.getAll('figcaption'), toggleContentEditable);\n          }\n        }\n      };\n    };\n\n    var setup = function setup(editor) {\n      editor.on('PreInit', function () {\n        editor.parser.addNodeFilter('figure', toggleContentEditableState(true));\n        editor.serializer.addNodeFilter('figure', toggleContentEditableState(false));\n      });\n    };\n\n    var FilterContent = {\n      setup: setup\n    };\n\n    var fromHtml = function fromHtml(html, scope) {\n      var doc = scope || domGlobals.document;\n      var div = doc.createElement('div');\n      div.innerHTML = html;\n\n      if (!div.hasChildNodes() || div.childNodes.length > 1) {\n        domGlobals.console.error('HTML does not have a single root node', html);\n        throw new Error('HTML must have a single root node');\n      }\n\n      return fromDom(div.childNodes[0]);\n    };\n\n    var fromTag = function fromTag(tag, scope) {\n      var doc = scope || domGlobals.document;\n      var node = doc.createElement(tag);\n      return fromDom(node);\n    };\n\n    var fromText = function fromText(text, scope) {\n      var doc = scope || domGlobals.document;\n      var node = doc.createTextNode(text);\n      return fromDom(node);\n    };\n\n    var fromDom = function fromDom(node) {\n      if (node === null || node === undefined) {\n        throw new Error('Node cannot be null or undefined');\n      }\n\n      return {\n        dom: constant(node)\n      };\n    };\n\n    var fromPoint = function fromPoint(docElm, x, y) {\n      var doc = docElm.dom();\n      return Option.from(doc.elementFromPoint(x, y)).map(fromDom);\n    };\n\n    var Element = {\n      fromHtml: fromHtml,\n      fromTag: fromTag,\n      fromText: fromText,\n      fromDom: fromDom,\n      fromPoint: fromPoint\n    };\n    var ATTRIBUTE = domGlobals.Node.ATTRIBUTE_NODE;\n    var CDATA_SECTION = domGlobals.Node.CDATA_SECTION_NODE;\n    var COMMENT = domGlobals.Node.COMMENT_NODE;\n    var DOCUMENT = domGlobals.Node.DOCUMENT_NODE;\n    var DOCUMENT_TYPE = domGlobals.Node.DOCUMENT_TYPE_NODE;\n    var DOCUMENT_FRAGMENT = domGlobals.Node.DOCUMENT_FRAGMENT_NODE;\n    var ELEMENT = domGlobals.Node.ELEMENT_NODE;\n    var TEXT = domGlobals.Node.TEXT_NODE;\n    var PROCESSING_INSTRUCTION = domGlobals.Node.PROCESSING_INSTRUCTION_NODE;\n    var ENTITY_REFERENCE = domGlobals.Node.ENTITY_REFERENCE_NODE;\n    var ENTITY = domGlobals.Node.ENTITY_NODE;\n    var NOTATION = domGlobals.Node.NOTATION_NODE;\n\n    var name = function name(element) {\n      var r = element.dom().nodeName;\n      return r.toLowerCase();\n    };\n\n    var Immutable = function Immutable() {\n      var fields = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        fields[_i] = arguments[_i];\n      }\n\n      return function () {\n        var values = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          values[_i] = arguments[_i];\n        }\n\n        if (fields.length !== values.length) {\n          throw new Error('Wrong number of arguments to struct. Expected \"[' + fields.length + ']\", got ' + values.length + ' arguments');\n        }\n\n        var struct = {};\n        each(fields, function (name, i) {\n          struct[name] = constant(values[i]);\n        });\n        return struct;\n      };\n    };\n\n    var node = function node() {\n      var f = Global$1.getOrDie('Node');\n      return f;\n    };\n\n    var compareDocumentPosition = function compareDocumentPosition(a, b, match) {\n      return (a.compareDocumentPosition(b) & match) !== 0;\n    };\n\n    var documentPositionPreceding = function documentPositionPreceding(a, b) {\n      return compareDocumentPosition(a, b, node().DOCUMENT_POSITION_PRECEDING);\n    };\n\n    var documentPositionContainedBy = function documentPositionContainedBy(a, b) {\n      return compareDocumentPosition(a, b, node().DOCUMENT_POSITION_CONTAINED_BY);\n    };\n\n    var Node = {\n      documentPositionPreceding: documentPositionPreceding,\n      documentPositionContainedBy: documentPositionContainedBy\n    };\n\n    var cached = function cached(f) {\n      var called = false;\n      var r;\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        if (!called) {\n          called = true;\n          r = f.apply(null, args);\n        }\n\n        return r;\n      };\n    };\n\n    var firstMatch = function firstMatch(regexes, s) {\n      for (var i = 0; i < regexes.length; i++) {\n        var x = regexes[i];\n        if (x.test(s)) return x;\n      }\n\n      return undefined;\n    };\n\n    var find$1 = function find$1(regexes, agent) {\n      var r = firstMatch(regexes, agent);\n      if (!r) return {\n        major: 0,\n        minor: 0\n      };\n\n      var group = function group(i) {\n        return Number(agent.replace(r, '$' + i));\n      };\n\n      return nu$3(group(1), group(2));\n    };\n\n    var detect = function detect(versionRegexes, agent) {\n      var cleanedAgent = String(agent).toLowerCase();\n      if (versionRegexes.length === 0) return unknown();\n      return find$1(versionRegexes, cleanedAgent);\n    };\n\n    var unknown = function unknown() {\n      return nu$3(0, 0);\n    };\n\n    var nu$3 = function nu$3(major, minor) {\n      return {\n        major: major,\n        minor: minor\n      };\n    };\n\n    var Version = {\n      nu: nu$3,\n      detect: detect,\n      unknown: unknown\n    };\n    var edge = 'Edge';\n    var chrome = 'Chrome';\n    var ie = 'IE';\n    var opera = 'Opera';\n    var firefox = 'Firefox';\n    var safari = 'Safari';\n\n    var isBrowser = function isBrowser(name, current) {\n      return function () {\n        return current === name;\n      };\n    };\n\n    var unknown$1 = function unknown$1() {\n      return nu$4({\n        current: undefined,\n        version: Version.unknown()\n      });\n    };\n\n    var nu$4 = function nu$4(info) {\n      var current = info.current;\n      var version = info.version;\n      return {\n        current: current,\n        version: version,\n        isEdge: isBrowser(edge, current),\n        isChrome: isBrowser(chrome, current),\n        isIE: isBrowser(ie, current),\n        isOpera: isBrowser(opera, current),\n        isFirefox: isBrowser(firefox, current),\n        isSafari: isBrowser(safari, current)\n      };\n    };\n\n    var Browser = {\n      unknown: unknown$1,\n      nu: nu$4,\n      edge: constant(edge),\n      chrome: constant(chrome),\n      ie: constant(ie),\n      opera: constant(opera),\n      firefox: constant(firefox),\n      safari: constant(safari)\n    };\n    var windows = 'Windows';\n    var ios = 'iOS';\n    var android = 'Android';\n    var linux = 'Linux';\n    var osx = 'OSX';\n    var solaris = 'Solaris';\n    var freebsd = 'FreeBSD';\n\n    var isOS = function isOS(name, current) {\n      return function () {\n        return current === name;\n      };\n    };\n\n    var unknown$2 = function unknown$2() {\n      return nu$5({\n        current: undefined,\n        version: Version.unknown()\n      });\n    };\n\n    var nu$5 = function nu$5(info) {\n      var current = info.current;\n      var version = info.version;\n      return {\n        current: current,\n        version: version,\n        isWindows: isOS(windows, current),\n        isiOS: isOS(ios, current),\n        isAndroid: isOS(android, current),\n        isOSX: isOS(osx, current),\n        isLinux: isOS(linux, current),\n        isSolaris: isOS(solaris, current),\n        isFreeBSD: isOS(freebsd, current)\n      };\n    };\n\n    var OperatingSystem = {\n      unknown: unknown$2,\n      nu: nu$5,\n      windows: constant(windows),\n      ios: constant(ios),\n      android: constant(android),\n      linux: constant(linux),\n      osx: constant(osx),\n      solaris: constant(solaris),\n      freebsd: constant(freebsd)\n    };\n\n    var DeviceType = function DeviceType(os, browser, userAgent) {\n      var isiPad = os.isiOS() && /ipad/i.test(userAgent) === true;\n      var isiPhone = os.isiOS() && !isiPad;\n      var isAndroid3 = os.isAndroid() && os.version.major === 3;\n      var isAndroid4 = os.isAndroid() && os.version.major === 4;\n      var isTablet = isiPad || isAndroid3 || isAndroid4 && /mobile/i.test(userAgent) === true;\n      var isTouch = os.isiOS() || os.isAndroid();\n      var isPhone = isTouch && !isTablet;\n      var iOSwebview = browser.isSafari() && os.isiOS() && /safari/i.test(userAgent) === false;\n      return {\n        isiPad: constant(isiPad),\n        isiPhone: constant(isiPhone),\n        isTablet: constant(isTablet),\n        isPhone: constant(isPhone),\n        isTouch: constant(isTouch),\n        isAndroid: os.isAndroid,\n        isiOS: os.isiOS,\n        isWebView: constant(iOSwebview)\n      };\n    };\n\n    var detect$1 = function detect$1(candidates, userAgent) {\n      var agent = String(userAgent).toLowerCase();\n      return find(candidates, function (candidate) {\n        return candidate.search(agent);\n      });\n    };\n\n    var detectBrowser = function detectBrowser(browsers, userAgent) {\n      return detect$1(browsers, userAgent).map(function (browser) {\n        var version = Version.detect(browser.versionRegexes, userAgent);\n        return {\n          current: browser.name,\n          version: version\n        };\n      });\n    };\n\n    var detectOs = function detectOs(oses, userAgent) {\n      return detect$1(oses, userAgent).map(function (os) {\n        var version = Version.detect(os.versionRegexes, userAgent);\n        return {\n          current: os.name,\n          version: version\n        };\n      });\n    };\n\n    var UaString = {\n      detectBrowser: detectBrowser,\n      detectOs: detectOs\n    };\n\n    var contains = function contains(str, substr) {\n      return str.indexOf(substr) !== -1;\n    };\n\n    var normalVersionRegex = /.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/;\n\n    var checkContains = function checkContains(target) {\n      return function (uastring) {\n        return contains(uastring, target);\n      };\n    };\n\n    var browsers = [{\n      name: 'Edge',\n      versionRegexes: [/.*?edge\\/ ?([0-9]+)\\.([0-9]+)$/],\n      search: function search(uastring) {\n        var monstrosity = contains(uastring, 'edge/') && contains(uastring, 'chrome') && contains(uastring, 'safari') && contains(uastring, 'applewebkit');\n        return monstrosity;\n      }\n    }, {\n      name: 'Chrome',\n      versionRegexes: [/.*?chrome\\/([0-9]+)\\.([0-9]+).*/, normalVersionRegex],\n      search: function search(uastring) {\n        return contains(uastring, 'chrome') && !contains(uastring, 'chromeframe');\n      }\n    }, {\n      name: 'IE',\n      versionRegexes: [/.*?msie\\ ?([0-9]+)\\.([0-9]+).*/, /.*?rv:([0-9]+)\\.([0-9]+).*/],\n      search: function search(uastring) {\n        return contains(uastring, 'msie') || contains(uastring, 'trident');\n      }\n    }, {\n      name: 'Opera',\n      versionRegexes: [normalVersionRegex, /.*?opera\\/([0-9]+)\\.([0-9]+).*/],\n      search: checkContains('opera')\n    }, {\n      name: 'Firefox',\n      versionRegexes: [/.*?firefox\\/\\ ?([0-9]+)\\.([0-9]+).*/],\n      search: checkContains('firefox')\n    }, {\n      name: 'Safari',\n      versionRegexes: [normalVersionRegex, /.*?cpu os ([0-9]+)_([0-9]+).*/],\n      search: function search(uastring) {\n        return (contains(uastring, 'safari') || contains(uastring, 'mobile/')) && contains(uastring, 'applewebkit');\n      }\n    }];\n    var oses = [{\n      name: 'Windows',\n      search: checkContains('win'),\n      versionRegexes: [/.*?windows\\ nt\\ ?([0-9]+)\\.([0-9]+).*/]\n    }, {\n      name: 'iOS',\n      search: function search(uastring) {\n        return contains(uastring, 'iphone') || contains(uastring, 'ipad');\n      },\n      versionRegexes: [/.*?version\\/\\ ?([0-9]+)\\.([0-9]+).*/, /.*cpu os ([0-9]+)_([0-9]+).*/, /.*cpu iphone os ([0-9]+)_([0-9]+).*/]\n    }, {\n      name: 'Android',\n      search: checkContains('android'),\n      versionRegexes: [/.*?android\\ ?([0-9]+)\\.([0-9]+).*/]\n    }, {\n      name: 'OSX',\n      search: checkContains('os x'),\n      versionRegexes: [/.*?os\\ x\\ ?([0-9]+)_([0-9]+).*/]\n    }, {\n      name: 'Linux',\n      search: checkContains('linux'),\n      versionRegexes: []\n    }, {\n      name: 'Solaris',\n      search: checkContains('sunos'),\n      versionRegexes: []\n    }, {\n      name: 'FreeBSD',\n      search: checkContains('freebsd'),\n      versionRegexes: []\n    }];\n    var PlatformInfo = {\n      browsers: constant(browsers),\n      oses: constant(oses)\n    };\n\n    var detect$2 = function detect$2(userAgent) {\n      var browsers = PlatformInfo.browsers();\n      var oses = PlatformInfo.oses();\n      var browser = UaString.detectBrowser(browsers, userAgent).fold(Browser.unknown, Browser.nu);\n      var os = UaString.detectOs(oses, userAgent).fold(OperatingSystem.unknown, OperatingSystem.nu);\n      var deviceType = DeviceType(os, browser, userAgent);\n      return {\n        browser: browser,\n        os: os,\n        deviceType: deviceType\n      };\n    };\n\n    var PlatformDetection = {\n      detect: detect$2\n    };\n    var detect$3 = cached(function () {\n      var userAgent = domGlobals.navigator.userAgent;\n      return PlatformDetection.detect(userAgent);\n    });\n    var PlatformDetection$1 = {\n      detect: detect$3\n    };\n\n    var regularContains = function regularContains(e1, e2) {\n      var d1 = e1.dom();\n      var d2 = e2.dom();\n      return d1 === d2 ? false : d1.contains(d2);\n    };\n\n    var ieContains = function ieContains(e1, e2) {\n      return Node.documentPositionContainedBy(e1.dom(), e2.dom());\n    };\n\n    var browser = PlatformDetection$1.detect().browser;\n    var contains$1 = browser.isIE() ? ieContains : regularContains;\n\n    var parent = function parent(element) {\n      var dom = element.dom();\n      return Option.from(dom.parentNode).map(Element.fromDom);\n    };\n\n    var spot = Immutable('element', 'offset');\n\n    var getRootElement = function getRootElement(elm) {\n      return parent(elm).filter(function (parentElm) {\n        return name(parentElm) === 'figure';\n      }).getOr(elm);\n    };\n\n    var register$1 = function register$1(editor) {\n      var makeContextMenuItem = function makeContextMenuItem(node) {\n        return {\n          text: 'Image',\n          icon: 'image',\n          onAction: function onAction() {\n            var rootElm = getRootElement(Element.fromDom(node));\n            editor.selection.select(rootElm.dom());\n            Dialog(editor).open();\n          }\n        };\n      };\n\n      editor.ui.registry.addToggleButton('image', {\n        icon: 'image',\n        tooltip: 'Insert/edit image',\n        onAction: Dialog(editor).open,\n        onSetup: function onSetup(buttonApi) {\n          return editor.selection.selectorChangedWithUnbind('img:not([data-mce-object],[data-mce-placeholder]),figure.image', buttonApi.setActive).unbind;\n        }\n      });\n      editor.ui.registry.addMenuItem('image', {\n        icon: 'image',\n        text: 'Image...',\n        onAction: Dialog(editor).open\n      });\n      editor.ui.registry.addContextMenu('image', {\n        update: function update(element) {\n          return isFigure(element) || isImage(element) && !Utils.isPlaceholderImage(element) ? [makeContextMenuItem(element)] : [];\n        }\n      });\n    };\n\n    var Buttons = {\n      register: register$1\n    };\n    global.add('image', function (editor) {\n      FilterContent.setup(editor);\n      Buttons.register(editor);\n      Commands.register(editor);\n    });\n\n    function Plugin() {}\n\n    return Plugin;\n  }(window);\n})();",null]}