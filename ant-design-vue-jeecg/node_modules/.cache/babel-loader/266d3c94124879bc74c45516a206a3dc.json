{"remainingRequest":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js??ref--0-0!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_vue-loader@15.9.2@vue-loader\\lib\\index.js??vue-loader-options!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeSelect.vue","mtime":1588673568115},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_vue-loader@15.9.2@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _toConsumableArray from \"E:/gitweb/vcloudsapce_web/ant-design-vue-jeecg/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.regexp.split\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 异步树加载组件 通过传入表名 显示字段 存储字段 加载一个树控件\n* <j-tree-select dict=\"aa_tree_test,aad,id\" pid-field=\"pid\" ></j-tree-select>\n* */\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JTreeSelect',\n  props: {\n    value: {\n      type: String,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    dict: {\n      type: String,\n      default: '',\n      required: false\n    },\n    pidField: {\n      type: String,\n      default: 'pid',\n      required: false\n    },\n    pidValue: {\n      type: String,\n      default: '0',\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    hasChildField: {\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      treeValue: \"\",\n      treeData: [],\n      url: \"/sys/dict/loadTreeData\",\n      view: '/sys/dict/loadDictItem/',\n      tableName: \"\",\n      text: \"\",\n      code: \"\"\n    };\n  },\n  watch: {\n    value: function value() {\n      this.loadItemByCode();\n    },\n    dict: function dict() {\n      this.initDictInfo();\n      this.loadRoot();\n    }\n  },\n  created: function created() {\n    this.initDictInfo();\n    this.loadRoot();\n    this.loadItemByCode();\n  },\n  methods: {\n    loadItemByCode: function loadItemByCode() {\n      var _this = this;\n\n      if (!this.value || this.value == \"0\") {\n        this.treeValue = \"\";\n      } else {\n        getAction(\"\".concat(this.view).concat(this.dict), {\n          key: this.value\n        }).then(function (res) {\n          if (res.success) {\n            _this.treeValue = {\n              key: _this.value,\n              value: _this.value,\n              label: res.result\n            };\n          }\n        });\n      }\n    },\n    initDictInfo: function initDictInfo() {\n      var arr = this.dict.split(\",\");\n      this.tableName = arr[0];\n      this.text = arr[1];\n      this.code = arr[2];\n    },\n    asyncLoadTreeData: function asyncLoadTreeData(treeNode) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        if (treeNode.$vnode.children) {\n          resolve();\n          return;\n        }\n\n        var pid = treeNode.$vnode.key;\n        var param = {\n          pid: pid,\n          tableName: _this2.tableName,\n          text: _this2.text,\n          code: _this2.code,\n          pidField: _this2.pidField,\n          hasChildField: _this2.hasChildField\n        };\n        getAction(_this2.url, param).then(function (res) {\n          if (res.success) {\n            var _iterator = _createForOfIteratorHelper(res.result),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var i = _step.value;\n                i.value = i.key;\n\n                if (i.leaf == false) {\n                  i.isLeaf = false;\n                } else if (i.leaf == true) {\n                  i.isLeaf = true;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            _this2.addChildren(pid, res.result, _this2.treeData);\n\n            _this2.treeData = _toConsumableArray(_this2.treeData);\n          }\n\n          resolve();\n        });\n      });\n    },\n    addChildren: function addChildren(pid, children, treeArray) {\n      if (treeArray && treeArray.length > 0) {\n        var _iterator2 = _createForOfIteratorHelper(treeArray),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var item = _step2.value;\n\n            if (item.key == pid) {\n              if (!children || children.length == 0) {\n                item.isLeaf = true;\n              } else {\n                item.children = children;\n              }\n\n              break;\n            } else {\n              this.addChildren(pid, children, item.children);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    },\n    loadRoot: function loadRoot() {\n      var _this3 = this;\n\n      var param = {\n        pid: this.pidValue,\n        tableName: this.tableName,\n        text: this.text,\n        code: this.code,\n        pidField: this.pidField,\n        hasChildField: this.hasChildField\n      };\n      getAction(this.url, param).then(function (res) {\n        if (res.success && res.result) {\n          var _iterator3 = _createForOfIteratorHelper(res.result),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var i = _step3.value;\n              i.value = i.key;\n\n              if (i.leaf == false) {\n                i.isLeaf = false;\n              } else if (i.leaf == true) {\n                i.isLeaf = true;\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          _this3.treeData = _toConsumableArray(res.result);\n        } else {\n          console.log(\"数根节点查询结果-else\", res);\n        }\n      });\n    },\n    onChange: function onChange(value) {\n      if (!value) {\n        this.$emit('change', '');\n        this.treeValue = '';\n      } else {\n        this.$emit('change', value.value);\n        this.treeValue = value;\n      }\n    },\n    onSearch: function onSearch(value) {\n      console.log(value);\n    },\n    getCurrTreeData: function getCurrTreeData() {\n      return this.treeData;\n    }\n  },\n  //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n};",null]}