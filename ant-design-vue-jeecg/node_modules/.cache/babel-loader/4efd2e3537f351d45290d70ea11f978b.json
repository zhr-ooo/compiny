{"remainingRequest":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js??ref--0-0!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_vue-loader@15.9.2@vue-loader\\lib\\index.js??vue-loader-options!E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\src\\components\\chart\\DashChartDemo.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\src\\components\\chart\\DashChartDemo.vue","mtime":1588673568101},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_babel-loader@8.1.0@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\gitweb\\vcloudsapce_web\\ant-design-vue-jeecg\\node_modules\\_vue-loader@15.9.2@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { registerShape } from 'viser-vue';\nregisterShape('point', 'pointer', {\n  draw: function draw(cfg, container) {\n    var point = cfg.points[0];\n    point = this.parsePoint(point);\n    var center = this.parsePoint({\n      x: 0,\n      y: 0\n    });\n    container.addShape('line', {\n      attrs: {\n        x1: center.x,\n        y1: center.y,\n        x2: point.x,\n        y2: point.y + 15,\n        stroke: cfg.color,\n        lineWidth: 5,\n        lineCap: 'round'\n      }\n    });\n    return container.addShape('circle', {\n      attrs: {\n        x: center.x,\n        y: center.y,\n        r: 9.75,\n        stroke: cfg.color,\n        lineWidth: 4.5,\n        fill: '#fff'\n      }\n    });\n  }\n});\nvar scale = [{\n  dataKey: 'value',\n  min: 0,\n  max: 9,\n  tickInterval: 1,\n  nice: false\n}];\nvar data = [{\n  value: 0\n}];\nexport default {\n  name: \"DashChartDemo\",\n  props: {\n    datasource: {\n      type: Number,\n      default: 0\n    },\n    title: {\n      type: String,\n      default: ''\n    }\n  },\n  created: function created() {\n    if (!this.datasource) {\n      this.chartData = data;\n    } else {\n      this.chartData = [{\n        value: this.datasource\n      }];\n    }\n\n    this.getChartData();\n  },\n  watch: {\n    'datasource': function datasource(val) {\n      this.chartData = [{\n        value: val\n      }];\n      this.getChartData();\n    }\n  },\n  methods: {\n    getChartData: function getChartData() {\n      if (this.chartData && this.chartData.length > 0) {\n        this.abcd = this.chartData[0].value * 10;\n      } else {\n        this.abcd = 70;\n      }\n    },\n    getHtmlGuideHtml: function getHtmlGuideHtml() {\n      return '<div style=\"width: 300px;text-align: center;\">\\n' + '<p style=\"font-size: 14px;color: #545454;margin: 0;\">' + this.title + '</p>\\n' + '<p style=\"font-size: 36px;color: #545454;margin: 0;\">' + this.abcd + '%</p>\\n' + '</div>';\n    },\n    getArcGuide2End: function getArcGuide2End() {\n      return [this.chartData[0].value, 0.945];\n    }\n  },\n  data: function data() {\n    return {\n      chartData: [],\n      height: 400,\n      scale: scale,\n      abcd: 70,\n      axisLabel: {\n        offset: -16,\n        textStyle: {\n          fontSize: 18,\n          textAlign: 'center',\n          textBaseline: 'middle'\n        }\n      },\n      axisSubTickLine: {\n        length: -8,\n        stroke: '#fff',\n        strokeOpacity: 1\n      },\n      axisTickLine: {\n        length: -17,\n        stroke: '#fff',\n        strokeOpacity: 1\n      },\n      arcGuide1Start: [0, 0.945],\n      arcGuide1End: [9, 0.945],\n      arcGuide1Style: {\n        stroke: '#CBCBCB',\n        lineWidth: 18\n      },\n      arcGuide2Start: [0, 0.945],\n      arcGuide2Style: {\n        stroke: '#1890FF',\n        lineWidth: 18\n      },\n      htmlGuidePosition: ['50%', '100%'],\n      htmlGuideHtml: \"\\n      <div style=\\\"width: 300px;text-align: center;\\\">\\n        <p style=\\\"font-size: 14px;color: #545454;margin: 0;\\\">\".concat(this.title, \"</p>\\n        <p style=\\\"font-size: 36px;color: #545454;margin: 0;\\\">\").concat(this.abcd, \"%</p>\\n      </div>\\n    \")\n    };\n  }\n};",null]}